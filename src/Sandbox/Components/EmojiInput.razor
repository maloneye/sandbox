@namespace MyEmoji
@using MyEmoji.Sub
@using Markdig
@using System.Threading 

<style>
    .messagePreviewContainer {
        background-color: #eee;
        padding: 10px;
        border-radius: 15px;
        margin:5px
    }

    /* Popover styling */
    .popover__wrapper {
        position: relative;
        display: inline-block;
    }

    .popover__content {
        opacity: 0;
        visibility: hidden;
        position: absolute;
        left: -150px;
        transform: translate(0px, -10px);
        transition-delay: 0.5s;
        background-color: #F8F8F8;
        padding: 1.5rem;
        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
        width: auto;
    }

        .popover__content:before {
            position: absolute;
            z-index: -1;
            content: "";
            right: calc(50% - 10px);
            top: -8px;
            border-style: solid;
            border-width: 0 10px 10px 10px;
            border-color: transparent transparent #F8F8F8 transparent;
            transition-duration: 0.3s;
            transition-property: transform;
        }

    .popover__wrapper:hover .popover__content {
        z-index: 10;
        opacity: 1;
        visibility: visible;
        transform: translate(0px, 10px);
        transition: all 0.5s cubic-bezier(0.75, -0.02, 0.2, 0.97);
    }

    .form-control{
        width:25%
    }
</style>



<div class="input-group mb-20" style="@StyleTextInputContainer" >

    <input type="text" class="form-control" style="@StyleTextInput" placeholder="@Placeholder" aria-label="@Placeholder"
           aria-describedby="button-emojipicker" @bind="Message" @bind:event="oninput" autocomplete="@AutoComplete"
           @onkeyup="@(() => this.PreviewMessageUpdated(Message))"
           @onfocus="@(() => this.setInputFocused(true))" @onblur="@(() => this.setInputFocused(false))"
           disabled="disabled"     
            >


    <div class="input-group-append popover__wrapper" style="@StyleEmojiBtnContainer">
        <button class="btn btn-outline-secondary" style="@StyleEmojiBtn" type="button" disabled="@Enabled" id="button-emojipicker">@SmileyBtnIcon</button>
        <div class="popover__content" style="@StyleEmojiPopoverContainer">
            <EmojiPanelContainer AddEmoji="@AddEmoji" ClassEmojiTabBtnActive="@ClassEmojiTabBtnActive" ClassEmojiTabBtnInActive="@ClassEmojiTabBtnInActive"
                                 EmojiList="@AllEmojies" />
        </div>
    </div>



</div>




@code {
    #region fields
    private string _message;
    private bool _isInputFocused = false;
    #endregion

    #region properties
    // Message used by preview container
    private string PreviewMessage { get; set; }

    [Parameter] public string StylePreviewContainer { get; set; } = "";
    [Parameter] public string StyleTextInputContainer { get; set; } = "";
    [Parameter] public string StyleTextInput { get; set; } = "";
    [Parameter] public string StyleFileBtnContainer { get; set; } = "";
    [Parameter] public string StyleFileBtn { get; set; } = "";
    [Parameter] public string StyleDropzone { get; set; } = "";
    [Parameter] public string StyleEmojiBtnContainer { get; set; } = "";
    [Parameter] public string StyleEmojiBtn { get; set; } = "";
    [Parameter] public string StyleEmojiPopoverContainer { get; set; } = "";
    [Parameter] public string StyleBtnClearContainer { get; set; } = "";
    [Parameter] public string StyleBtnClear { get; set; } = "";
    [Parameter] public string StyleBtnSubmitContainer { get; set; } = "";
    [Parameter] public string StyleBtnSubmit { get; set; } = "";
    [Parameter] public bool Enabled { get; set; } = true;

    /// <summary>Enable message preview. Useful for HTML/Markdown preview.</summary>
    [Parameter] public bool ShowPreview { get; set; } = true;

    /// <summary>Defines the css-classes for the tab button within the emoji panel (state: active)</summary>
    [Parameter] public string ClassEmojiTabBtnActive { get; set; } = "btn-dark";

    /// <summary>Defines the css-classes for the tab button within the emoji panel (state: inactive)</summary>
    [Parameter] public string ClassEmojiTabBtnInActive { get; set; } = "btn-light";

    /// <summary>Add custom symbols/emojies to this list to create a new tab at the end of the emoji picker.</summary>
    [Parameter] public List<string> CustomSymbols { get; set; }

    /// <summary>Web-Url the uploaded files will be sent to.</summary>
    [Parameter] public string FileUploadRoute { get; set; } = "/";

    /// <summary>Optional cancellation token for file upload route.</summary>
    [Parameter] public CancellationToken CancellationToken { get; set; }

    /// <summary>Text-input value. Mainly used to bind internal value.</summary>
    [Parameter]
    public string Message
    {
        get => _message;
        set
        {
            if (_message == value) return;
            _message = value;
            MessageChanged.InvokeAsync(value);
            this.PreviewMessageUpdated(value);
        }
    }

    /// <summary>´Callback for OnMessageChanged. Mainly used internally.</summary>
    [Parameter] public EventCallback<string> MessageChanged { get; set; }

    /// <summary>Function to be called when files are uploaded.</summary>
    [Parameter] public Action<List<string>> AddFiles { get; set; } = (List<string> filesSrc) => Console.WriteLine("EmojiInput: You way want to add an AddImages()-Callback.");

    /// <summary>Placeholder for text input</summary>
    [Parameter] public string Placeholder { get; set; } = "";

    /// <summary>HTML-Entity, icon or text for bootstrap add-on prepend (input-field).</summary>
    [Parameter] public string AddonPrepend { get; set; } = "✉";

    /// <summary>If true a btn is shown, to toggle a dropzone for uploading files.</summary>
    [Parameter] public bool ShowFilePicker { get; set; } = true;


    /// <summary>Label for submit button.</summary>

    /// <summary>HTML-Entity, icon or text for smiley button.</summary>
    [Parameter] public string SmileyBtnIcon { get; set; } = "😃";

    /// <summary>HTML-Entity, icon or text for file button.</summary>

    /// <summary>Determines if input-autocomplete is on|off.</summary>
    [Parameter] public string AutoComplete { get; set; } = "on";
    #endregion

    #region methods
    protected void AddEmoji(string emoji) => Message = emoji;
    private bool IsFilePickerCollapsed { get; set; } = true;

    private void PreviewMessageUpdated(string newValue)
    {
        if (newValue != null)
        {
            this.PreviewMessage = Markdown.ToHtml(newValue);
            this.StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        if (CustomSymbols != null)
        {
            AllEmojies.Add(CustomSymbols);
        }
    }

    private List<List<string>> AllEmojies { get; set; } = EmojiList.EmojiesPerTab;

    private void setInputFocused(bool state)
    {
        this._isInputFocused = state;
        this.PreviewMessageUpdated(this.Message);
    }
    #endregion
}


