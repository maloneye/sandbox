@using MudBlazor.Utilities;

@inherits ComponentBase

<MudPaper Elevation="25" Class="pa-2 my-2 wrapper" MaxWidth="320px" MinWidth="220px" draggable="true" MaxHeight="80px">

        <MudText Typo="Typo.body2" Class="turn">Turn: @("\n"+Item.IdToTurnDate(Turn).ToString("dd-MMM"))</MudText>
        <MudText Class="name">@Item.Name</MudText>
        <MudText Typo="Typo.body2" Class="dob">@(((DateTime)Item.DOB!).ToString("dd-MMM"))</MudText>
        <MudText Align="Align.Center" Class="emoji">@Item.Emoji.ToImage()</MudText>
            <MudIconButton Class="d-inline" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" OnClick="EditItemClicked" Disabled="@(!IsEditable)" />
        @*OnClick="@(() => Selected(context))"*@

</MudPaper>

<style>
    .wrapper 
    {
       position:sticky;
        display: grid;
        grid-template-columns: repeat(5, 1fr);
    }

    .turn
    {
        grid-column:1;
        width:50px;
    }

        .name {
            grid-column: 2;
            width: 60px;
            vertical-align: central;
            text-align:center;
            height:50px;
            line-height: 50px;
        }

        .dob {
            grid-column: 3;
            width: 50px;
            vertical-align: central;
            text-align: center;
            height: 50px;
            line-height: 50px;
        }

        .emoji {
            grid-column: 4;
            width: 20px;
            vertical-align: central;
            text-align: center;
            height: 50px;
            line-height: 50px;
        }

        .editbutton {
            grid-column: 5;
            width: 20px;
            vertical-align: central;
        }


</style>
    @code {
    Guid id = Guid.NewGuid();
    [Parameter] public Housemate Item { get; set; }
    [Parameter] public bool IsEditable {get;set;} = false;
    [Parameter] public Housemate Turn { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> EditItemClicked { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
}
